<?php
class Assets {

    private $data_path;

    public function __construct() {
        
        $this->data_path = str_replace('vendor', '', __DIR__) . '/data';
    }

    // Save asset
    public function save($url, $file_name) {
        // get header
        $raw_header = get_headers($url, 1);
        $header = array();
        foreach ($raw_header as $key => $value)
            $header[strtolower($key)] = $value;

        if ((isset($header['cache-control']) && $header['cache-control'] != 'no-cache') || (isset($header['pragma']) && $header['pragma'] != 'no-cache')) {
            $return_data = array();
            $new_header = array();
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_HEADER, 1);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);
            $return = curl_exec($ch);
            $info = curl_getinfo($ch);
            curl_close($ch);
            list($curl_header, $asset) = explode("\r\n\r\n", $return, 2);

            if (isset($header['expires']))
                $new_header['expires'] = $header['expires'];

            if (isset($header['content-type']))
                $new_header['content-type'] = $header['content-type'];

            if (isset($header['last-modified']))
                $new_header['last-modified'] = $header['last-modified'];

            $new_header['content-length'] = $info['size_download'];

            if (isset($header['etag']))
                $new_header['etag'] = $header['etag'];

            if (isset($header['via']))
                $new_header['via'] = $_SERVER['HTTP_HOST'];

            if (isset($header['vary']))
                $new_header['vary'] = $header['vary'];

            if (isset($header['accept-encoding']))
                $new_header['accept-encoding'] = $header['accept-encoding'];

            if (isset($header['content-language']))
                $new_header['content-language'] = $header['content-language'];

            // check required space in data director if full remove data.
            if ($this->clean_up($info['size_download'])) {
                // if file exist refresh
                if(file_exists('data/' . $file_name)) 
                    @unlink('data/' . $file_name);
                
                file_put_contents("data/" . $file_name, $asset);
                $return_data['header'] = serialize($new_header);
                $return_data['file_size'] = $info['size_download'];
                $return_data['mime_type'] = $info['content_type'];

                return $return_data;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

// Read the record from the database and return
    public function serve($url) {
        global $entityManager,$method;
        
        $return = array();
        //update last served;
        $assets_info = $entityManager->getRepository('Entities\AssetInfo')->findOneBy(array('original_url' => filter($url)));
        $assets_info->setLastServed(new DateTime('NOW'));
        $entityManager->flush();
        ignore_user_abort(false);

        $filename = 'data/' . $assets_info->getName();

        if (file_exists($filename)) {

            // Build header here, return header
            $headers = unserialize($assets_info->getHeader());

            if (isset($headers['content-type']))
                header('content-type: ' . $headers['content-type']);

            if (isset($headers['content-length']))
                header('content-length: ' . $headers['content-length']);

            if (isset($headers['via']))
                header('via: ' . $_SERVER['HTTP_HOST']);

            if (isset($headers['vary']))
                header('vary: ' . $headers['vary']);

            if (isset($headers['last-modified']))
                header('last-modified: ' . $headers['last-modified']);

            if (isset($headers['etag']))
                header('etag: ' . $headers['etag']);

            if (isset($headers['content-language']))
                header('content-language: ' . $headers['content-language']);

            if (isset($headers['accept-encoding']))
                header('accept-encoding: ' . $headers['accept-encoding']);

            if (isset($headers['expires']))
                header('expires: ' . $headers['expires']);

            if (($method == 'GET') && file_exists($filename))
                readfile($filename);
        }
    }

// Locate the record from the database by original URL and deleted = FALSE
    public function validate($url) {
        global $entityManager,$connection;
        $assets_info = $entityManager->getRepository('Entities\AssetInfo')->findOneBy(array('original_url' => filter($url), 'deleted' => '0'));
        $header = unserialize($assets_info->getHeader());
        //if expiry date that is passed refresh image
        if(isset($header['expires']) && strtotime($header['expires']) < time())
        {
            $asset_data = $this->save($assets_info->getOriginalUrl(),$assets_info->getName());   
            if($asset_data)
            {
                $assets_info->setHeader($asset_data['header']);
                $assets_info->setLastServed(new DateTime('NOW'));
                $assets_info->setName(filter($assets_info->getName()));
                $assets_info->setSize(filter($asset_data['file_size']));
                $assets_info->setOriginalUrl(filter($assets_info->getOriginalUrl()));
                $assets_info->setMimeType(filter($asset_data['mime_type']));
                $entityManager->flush();
            }
        }
        if ($assets_info) {
            return $assets_info;
        } else {
            return false;
        }
    }

// if memory exceeded remove asset(s) from data directory
    public function clean_up($size_download) {
        global $settings, $connection;

        //Total size in bytes
        $toatl_disk_size = disk_total_space("/");
        //For window
        //$toatl_disk_size = disk_total_space("H:");

        //Total size of data directory in bytes
        $total_size_data = ($toatl_disk_size * $settings['setting']['max space']) / 100;
        //if size downloded greater than total size return false
        if ($size_download > $total_size_data)
            return false;


        // Total occupied size of data folder
        $total_occupied = $this->getDirectorySize($this->data_path);
        $total_occupied = $total_occupied + $size_download;

        while ($total_occupied >= $total_size_data) {
            $assets_info = array();
            $assets_info = $connection->prepare("SELECT * FROM assets_info WHERE deleted = 0 ORDER BY last_served DESC LIMIT 1");
            $assets_info->execute();
            $results = $assets_info->fetchAll();
            if ($results) {
                $update = $connection->prepare("UPDATE  assets_info SET deleted = 1  WHERE id = " . $results[0]['id'] . " ");
                $update->execute();
                @unlink('data/' . $results[0]['file_name']);
            }
            $total_occupied = $total_occupied - $results[0]['file_size'];
        }
        return true;
    }

    // get directory size
    public function getDirectorySize($directory) {
        $dirSize = 0;

        if (!$dh = opendir($directory))
            return false;

        while ($file = readdir($dh)) {
            if ($file == "." || $file == "..")
                continue;

            if (is_file($directory . "/" . $file))
                $dirSize += filesize($directory . "/" . $file);

            if (is_dir($directory . "/" . $file))
                $dirSize += $this->getDirectorySize($directory . "/" . $file);
        }

        closedir($dh);

        return $dirSize;
    }

}